using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Http;
using System.Threading.Tasks;
using System.IO;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;

namespace BookStoreApp02.Pages.Books
{
    [Authorize(Roles = "Admin")]
    public class EditModel : PageModel
    {
        private readonly BookStoreContext _context;
        private readonly IWebHostEnvironment _environment;
        public EditModel(BookStoreContext context, IWebHostEnvironment environment)
        {
            _context = context;
            _environment = environment;
        }
        [BindProperty]
        public Book Book { get; set; }
        [BindProperty]
        public IFormFile CoverImage { get; set; }
        public async Task<IActionResult> OnGetAsync(int id)
        {
            Book = await _context.Books.FindAsync(id);
            if (Book == null)
                return NotFound();
            return Page();
        }
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
                return Page();
            var bookToUpdate = await _context.Books.FindAsync(Book.Id);
            if (bookToUpdate == null)
                return NotFound();
            bookToUpdate.Title = Book.Title;
            bookToUpdate.Author = Book.Author;
            bookToUpdate.Price = Book.Price;
            bookToUpdate.Genre = Book.Genre;
            bookToUpdate.PublishDate = Book.PublishDate;
            bookToUpdate.Description = Book.Description;
            if (CoverImage != null && CoverImage.Length > 0)
            {
                var uploadsFolder = Path.Combine(_environment.WebRootPath, "uploads");
                Directory.CreateDirectory(uploadsFolder);
                var fileName = Guid.NewGuid() + Path.GetExtension(CoverImage.FileName);
                var filePath = Path.Combine(uploadsFolder, fileName);
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await CoverImage.CopyToAsync(stream);
                }
                bookToUpdate.CoverImagePath = fileName;
            }
            await _context.SaveChangesAsync();
            return RedirectToPage("Index");
        }
    }
}
